---
# tasks file for ethereum
- name: install stuff to compile geth
  apt: pkg={{ item }} state=installed
  with_items:
    - build-essential
    - libgmp3-dev


- name: check go extraction
  stat: path=/opt/go/bin/go
  register: go_installed


- name : download {{ go }}
  get_url: url=https://storage.googleapis.com/golang/{{ go }}.tar.gz dest=/tmp/{{ go }}.tar.gz validate_certs=no
  when: not go_installed.stat.exists and not go_installed.stat.exists

- name: check go extraction
  stat: path=/tmp/{{ go }}
  register: go_extracted

- name: unarchive go
  unarchive: src=/tmp/{{ go }}.tar.gz dest=/opt copy=no
  when: not go_installed.stat.exists and not go_extracted.stat.exists

- name: Clone geth
  git: repo=https://github.com/ethereum/go-ethereum.git dest=/opt/go-ethereum accept_hostkey=True version={{ geth_version }}

- name: check geth build
  stat: path=/opt/go-ethereum/build/bin/geth
  register: geth_build

- name: make geth
  command: chdir=/opt/go-ethereum make
  environment:
    GOROOT: /opt/go
    GOPATH: /home/vagrant/go
    PATH: /opt/go/bin:{{ ansible_env.PATH }}
  when: not geth_build.stat.exists

- name: add ethereum ppa
  apt_repository: repo='ppa:{{ item }}' update_cache=yes
  with_items:
    - ethereum/ethereum

#Solc
- name: install solc
  apt: pkg=solc state=installed

# mist
- name: install useful package for mist
  apt: pkg={{ item }} state=installed
  with_items:
    - libxss1

- name: check mist installed
  stat: path=/usr/local/bin/mist
  register: mist_installed

- name: install chromium
  apt: pkg=chromium-browser state=installed

- name : download mist
  get_url:
    url={{ mist_version_url_deb }}
    dest=/tmp/
    validate_certs=no
    checksum="sha256:{{ mist_version_url_deb_checksum }}"
  when: not mist_installed.stat.exists

- name: install mist
  command: chdir=/tmp gdebi --non-interactive {{ mist_version_deb }}
  become: true
  when: not mist_installed.stat.exists

# tasks file for populus
- name: install populus dependencies
  apt: pkg={{ item }} state=installed
  with_items:
    - python3-dev
    - python3-pip
    - pkg-config
    - libffi-dev
    - dh-autoreconf

- name: install newer version of setuptools
  pip: name=setuptools version=28.7.1

- name: install newer version of cffi
  pip: name=cffi

- name: install populus
  pip: name=populus version=1.4.2

# Truffle

- name: check truffle installed
  stat: path=/opt/{{ node_version }}/lib/node_modules/truffle
  register: truffle_installed

- name: install truffle
  command: npm -g install truffle
  when: not truffle_installed.stat.exists

# Dapple

- name: check dapple installed
  stat: path=/opt/{{ node_version }}/lib/node_modules/dapple
  register: dapple_installed

- name: install dapple
  command: npm -g install dapple
  when: not dapple_installed.stat.exists


# Embark

- name: check embark installed
  stat: path=/opt/{{ node_version }}/lib/node_modules/embark
  register: embark_installed

- name: install embark
  command: npm -g install embark
  when: not embark_installed.stat.exists

# testrpc

- name: check testrpc installed
  stat: path=/opt/{{ node_version }}/lib/node_modules/ethereumjs-testrpc
  register: testrpcjs_installed

- name: install testrpc
  command: npm -g install ethereumjs-testrpc
  when: not testrpcjs_installed.stat.exists


# PARITY

- name: check cargo install
  stat: path=/root/.cargo/bin/cargo
  register: cargo_installed

- get_url: url=https://sh.rustup.rs dest=/tmp/rustup.sh validate_certs=no
  when: not cargo_installed.stat.exists

- name: install rust
  command: chdir=/tmp /bin/sh rustup.sh -y
  when: not cargo_installed.stat.exists

- name: check parity install
  stat: path=/opt/parity/target/release/parity
  register: parity_installed

- name: Clone parity
  git: repo=https://github.com/ethcore/parity.git dest=/opt/parity recursive=yes accept_hostkey=True version={{ parity_version }}

- name: build parity - very long
  command: chdir=/opt/parity /root/.cargo/bin/cargo build --release --verbose
  when: not parity_installed.stat.exists

# IPFS

- name: check if go ipfs installed extraction
  stat: path=/usr/local/bin/ipfs
  register: go_ipfs_installed

- name: download go-ipfs {{  go_ipfs_version  }}
  get_url: url=https://dist.ipfs.io/go-ipfs/{{  go_ipfs_version  }}/go-ipfs_{{  go_ipfs_version  }}_linux-386.tar.gz dest=/tmp/go_ipfs{{ go_ipfs_version }}.tar.gz validate_certs=no
  when: not go_ipfs_installed.stat.exists

- name: unarchive go-ipfs {{  go_ipfs_version  }}
  unarchive: src=/tmp/go_ipfs{{ go_ipfs_version }}.tar.gz dest=/tmp copy=no
  when: not go_ipfs_installed.stat.exists

- name: install go-ipfs {{  go_ipfs_version  }}
  command: chdir=/tmp/go-ipfs  mv ipfs /usr/local/bin/ipfs
  when: not go_ipfs_installed.stat.exists
